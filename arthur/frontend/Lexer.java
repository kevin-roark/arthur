/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


/** USER CODE SECTION */

package arthur.frontend;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>arthur.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VOIDNESS = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\4\1\5\1\1\22\0\1\3\1\0\1\12"+
    "\2\0\1\56\1\0\1\13\1\45\1\47\1\11\1\55\1\17\1\14"+
    "\1\15\1\10\12\7\1\0\1\46\1\16\1\54\1\20\1\0\1\21"+
    "\10\6\1\42\11\6\1\36\2\6\1\40\4\6\3\0\1\57\1\6"+
    "\1\0\1\43\1\31\1\25\1\37\1\41\1\52\1\35\1\6\1\34"+
    "\2\6\1\27\1\24\1\22\1\26\2\6\1\30\1\32\1\33\1\23"+
    "\1\44\1\53\3\6\1\50\1\0\1\51\7\0\1\4\u1fa2\0\1\4"+
    "\1\4\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\17\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\3\1\21\1\22\1\23"+
    "\1\24\4\0\1\25\1\0\1\25\1\26\1\4\1\0"+
    "\1\27\1\30\1\31\3\3\1\32\4\3\1\33\1\3"+
    "\1\34\6\3\1\35\2\0\1\36\1\37\10\3\1\40"+
    "\1\3\1\41\2\3\4\0\3\3\1\42\2\3\1\43"+
    "\3\3\1\0\1\44\2\3\1\0\1\45\4\0\1\46"+
    "\1\47\11\0\1\50\3\0\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\60\0\140\0\60\0\220\0\300\0\360"+
    "\0\60\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\60\0\u0210"+
    "\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390"+
    "\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0540\0\u0570\0\60"+
    "\0\60\0\60\0\u01b0\0\u05a0\0\u05d0\0\u0120\0\u0120\0\u0150"+
    "\0\u0150\0\60\0\u01b0\0\u0600\0\60\0\60\0\u0240\0\u0630"+
    "\0\u0660\0\u0690\0\220\0\u06c0\0\u06f0\0\u0720\0\u0750\0\220"+
    "\0\u0780\0\220\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\60\0\u08d0\0\u0900\0\u0930\0\220\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\220\0\u0ae0\0\220"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\220\0\u0cc0\0\u0cf0\0\220\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\220\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\60\0\220\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\60\0\u1110\0\u1140"+
    "\0\u1170\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\6\1\23\1\24\1\6\1\25\1\26"+
    "\1\27\1\30\1\31\1\6\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\6\1\47\1\50\1\51\1\52\62\0\1\5"+
    "\63\0\2\6\12\0\23\6\5\0\2\6\13\0\1\7"+
    "\5\0\1\53\52\0\1\54\1\55\46\0\1\56\2\0"+
    "\1\56\2\0\4\56\1\57\45\56\1\60\2\0\1\60"+
    "\2\0\5\60\1\61\44\60\7\0\1\7\5\0\1\53"+
    "\2\0\1\62\46\0\1\63\66\0\1\64\35\0\1\65"+
    "\57\0\1\66\12\0\1\67\56\0\2\6\12\0\1\6"+
    "\1\70\2\6\1\71\16\6\5\0\2\6\12\0\2\6"+
    "\12\0\4\6\1\72\16\6\5\0\2\6\12\0\2\6"+
    "\12\0\6\6\1\73\14\6\5\0\2\6\12\0\2\6"+
    "\12\0\17\6\1\74\3\6\5\0\2\6\12\0\2\6"+
    "\12\0\4\6\1\75\16\6\5\0\2\6\12\0\2\6"+
    "\12\0\11\6\1\76\11\6\5\0\2\6\12\0\2\6"+
    "\12\0\6\6\1\77\14\6\5\0\2\6\12\0\2\6"+
    "\12\0\23\6\5\0\1\100\1\6\12\0\2\6\12\0"+
    "\4\6\1\101\16\6\5\0\2\6\12\0\2\6\12\0"+
    "\23\6\5\0\1\6\1\102\12\0\2\6\12\0\12\6"+
    "\1\103\10\6\5\0\2\6\12\0\2\6\12\0\5\6"+
    "\1\104\15\6\5\0\2\6\12\0\2\6\12\0\2\6"+
    "\1\105\20\6\5\0\2\6\12\0\2\6\12\0\1\106"+
    "\22\6\5\0\2\6\12\0\2\6\12\0\4\6\1\107"+
    "\16\6\5\0\2\6\12\0\2\6\12\0\21\6\1\110"+
    "\1\6\5\0\2\6\60\0\1\111\3\0\1\54\1\4"+
    "\1\5\1\54\2\0\52\54\11\55\1\112\46\55\1\0"+
    "\3\64\1\0\1\64\1\0\1\113\56\0\2\6\12\0"+
    "\2\6\1\114\20\6\5\0\2\6\12\0\2\6\12\0"+
    "\11\6\1\115\11\6\5\0\2\6\12\0\2\6\12\0"+
    "\5\6\1\116\15\6\5\0\2\6\12\0\2\6\12\0"+
    "\11\6\1\117\11\6\5\0\2\6\12\0\2\6\12\0"+
    "\4\6\1\120\16\6\5\0\2\6\12\0\2\6\12\0"+
    "\6\6\1\121\14\6\5\0\2\6\12\0\2\6\12\0"+
    "\1\6\1\122\21\6\5\0\2\6\12\0\2\6\12\0"+
    "\1\6\1\123\21\6\5\0\2\6\12\0\2\6\12\0"+
    "\15\6\1\124\5\6\5\0\2\6\12\0\2\6\12\0"+
    "\10\6\1\125\12\6\5\0\1\126\1\6\12\0\2\6"+
    "\12\0\21\6\1\127\1\6\5\0\2\6\12\0\2\6"+
    "\12\0\15\6\1\130\5\6\5\0\2\6\12\0\2\6"+
    "\12\0\12\6\1\131\10\6\5\0\2\6\12\0\2\6"+
    "\12\0\5\6\1\132\15\6\5\0\2\6\4\0\10\55"+
    "\1\5\1\112\46\55\1\0\3\133\1\0\1\133\1\0"+
    "\1\134\7\0\1\135\41\0\3\136\1\0\1\136\2\6"+
    "\12\0\23\6\5\0\2\6\12\0\2\6\12\0\4\6"+
    "\1\137\16\6\5\0\2\6\12\0\2\6\12\0\1\6"+
    "\1\140\21\6\5\0\2\6\12\0\2\6\12\0\5\6"+
    "\1\114\15\6\5\0\2\6\12\0\2\6\12\0\12\6"+
    "\1\141\10\6\5\0\2\6\12\0\2\6\12\0\17\6"+
    "\1\142\3\6\5\0\2\6\12\0\2\6\12\0\1\143"+
    "\22\6\5\0\2\6\12\0\2\6\12\0\17\6\1\144"+
    "\3\6\5\0\2\6\12\0\2\6\12\0\17\6\1\145"+
    "\3\6\5\0\2\6\12\0\2\6\12\0\13\6\1\146"+
    "\7\6\5\0\2\6\12\0\2\6\12\0\15\6\1\147"+
    "\5\6\5\0\2\6\12\0\2\6\12\0\10\6\1\150"+
    "\12\6\5\0\2\6\5\0\3\133\1\0\1\133\11\0"+
    "\1\135\41\0\3\133\1\0\1\133\1\0\1\133\7\0"+
    "\1\135\41\0\3\135\1\0\1\135\1\0\1\151\51\0"+
    "\3\136\1\0\1\136\1\152\13\0\23\152\5\0\2\152"+
    "\12\0\2\6\12\0\6\6\1\114\14\6\5\0\2\6"+
    "\12\0\2\6\12\0\6\6\1\153\14\6\5\0\2\6"+
    "\12\0\2\6\12\0\1\154\22\6\5\0\2\6\12\0"+
    "\2\6\12\0\15\6\1\114\5\6\5\0\2\6\12\0"+
    "\2\6\12\0\4\6\1\114\16\6\5\0\2\6\12\0"+
    "\2\6\12\0\17\6\1\114\3\6\5\0\2\6\5\0"+
    "\3\155\1\0\1\155\2\6\12\0\23\6\5\0\2\6"+
    "\12\0\2\6\12\0\17\6\1\156\3\6\5\0\2\6"+
    "\5\0\3\157\1\0\1\157\1\0\1\160\7\0\1\161"+
    "\41\0\3\162\1\0\1\162\2\152\12\0\23\152\1\163"+
    "\4\0\2\152\12\0\2\6\12\0\1\164\22\6\5\0"+
    "\2\6\12\0\2\6\12\0\13\6\1\114\7\6\5\0"+
    "\2\6\5\0\3\155\1\0\1\155\1\165\13\0\23\165"+
    "\5\0\2\165\5\0\3\157\1\0\1\157\11\0\1\161"+
    "\41\0\3\157\1\0\1\157\1\0\1\157\7\0\1\161"+
    "\41\0\3\161\1\0\1\161\1\0\1\166\51\0\3\162"+
    "\1\0\1\162\37\0\1\163\13\0\3\162\1\0\1\162"+
    "\2\165\12\0\23\165\1\163\4\0\2\165\5\0\3\167"+
    "\1\0\1\167\1\0\1\170\7\0\1\171\1\172\40\0"+
    "\3\167\1\0\1\167\11\0\1\171\1\172\40\0\3\167"+
    "\1\0\1\167\1\0\1\167\7\0\1\171\1\172\40\0"+
    "\3\171\1\0\1\171\1\0\1\173\4\0\1\174\1\175"+
    "\62\0\1\176\40\0\3\177\1\0\1\177\1\0\1\173"+
    "\5\0\1\175\2\0\1\200\46\0\1\173\5\0\1\175"+
    "\51\0\1\201\51\0\3\177\1\0\1\177\12\0\1\200"+
    "\57\0\1\202\40\0\3\177\1\0\1\177\1\0\1\201"+
    "\10\0\1\200\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\1\1\1\11\3\1\1\11\5\1"+
    "\1\11\21\1\5\11\2\1\3\11\4\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\11\22\1\1\11\2\0"+
    "\17\1\4\0\12\1\1\0\3\1\1\0\1\1\4\0"+
    "\1\11\1\1\11\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  SymbolTable table = SymbolTable.getGlobalTable();

  boolean startingFunction = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Illegal character: " + yytext());
          }
        case 42: break;
        case 2: 
          { /* do nothing */
          }
        case 43: break;
        case 3: 
          { return new Identifier(yytext(), yyline);
          }
        case 44: break;
        case 4: 
          { Double val = Double.parseDouble(yytext()); return new Num(val, yyline);
          }
        case 45: break;
        case 5: 
          { return new Token(Tokens.DIV, yyline);
          }
        case 46: break;
        case 6: 
          { return new Token(Tokens.TIMES, yyline);
          }
        case 47: break;
        case 7: 
          { return new Token(Tokens.MINUS, yyline);
          }
        case 48: break;
        case 8: 
          { return new Token(Tokens.DOT, yyline);
          }
        case 49: break;
        case 9: 
          { return new Token(Tokens.LT, yyline);
          }
        case 50: break;
        case 10: 
          { return new Token(Tokens.COMMA, yyline);
          }
        case 51: break;
        case 11: 
          { return new Token(Tokens.GT, yyline);
          }
        case 52: break;
        case 12: 
          { return new Token(Tokens.LPAREN, yyline);
          }
        case 53: break;
        case 13: 
          { return new Token(Tokens.SEMI, yyline);
          }
        case 54: break;
        case 14: 
          { return new Token(Tokens.RPAREN, yyline);
          }
        case 55: break;
        case 15: 
          { if(!startingFunction) {
                                table = new SymbolTable(table, "block");
                              } else {
                                startingFunction = false;
                              }
                              return new Token(Tokens.LCURLY, yyline);
          }
        case 56: break;
        case 16: 
          { table = table.getPrev(); return new Token(Tokens.RCURLY, yyline);
          }
        case 57: break;
        case 17: 
          { return new Token(Tokens.EQ, yyline);
          }
        case 58: break;
        case 18: 
          { return new Token(Tokens.PLUS, yyline);
          }
        case 59: break;
        case 19: 
          { return new Token(Tokens.MOD, yyline);
          }
        case 60: break;
        case 20: 
          { return new Token(Tokens.EXP, yyline);
          }
        case 61: break;
        case 21: 
          { return new StringLit(yytext(), yyline);
          }
        case 62: break;
        case 22: 
          { return new Token(Tokens.ARROW, yyline);
          }
        case 63: break;
        case 23: 
          { return new Token(Tokens.LTE, yyline);
          }
        case 64: break;
        case 24: 
          { return new Token(Tokens.GTE, yyline);
          }
        case 65: break;
        case 25: 
          { return new Arg(yytext(), yyline);
          }
        case 66: break;
        case 26: 
          { return new Token(Tokens.OR, yyline);
          }
        case 67: break;
        case 27: 
          { return new Token(Tokens.IF, yyline);
          }
        case 68: break;
        case 28: 
          { return new Token(Tokens.DW, yyline);
          }
        case 69: break;
        case 29: 
          { return new Token(Tokens.EQX2, yyline);
          }
        case 70: break;
        case 30: 
          { return new Type(yytext(), yyline);
          }
        case 71: break;
        case 31: 
          { return new Token(Tokens.NOT, yyline);
          }
        case 72: break;
        case 32: 
          { return new Token(Tokens.ELF, yyline);
          }
        case 73: break;
        case 33: 
          { return new Token(Tokens.AND, yyline);
          }
        case 74: break;
        case 34: 
          { return new Token(Tokens.TRUE, yyline);
          }
        case 75: break;
        case 35: 
          { return new Token(Tokens.ELSE, yyline);
          }
        case 76: break;
        case 36: 
          { String[] arr = yytext().split("\\s+");
                              String type = arr[0];
                              String name = arr[1];
                              Var var = new Var(name, type, yyline);
                              table.getMap().put(name, var);
                              return var;
          }
        case 77: break;
        case 37: 
          { return new Token(Tokens.FALSE, yyline);
          }
        case 78: break;
        case 38: 
          { String text = yytext().replace("(", "");
                              String[] arr = text.split("\\s+");
                              String returnType = arr[0];
                              String name = arr[1];
                              Function fun = new Function(name, returnType, yyline);
                              table.getMap().put(name, fun);
                              return fun;
          }
        case 79: break;
        case 39: 
          { return new Token(Tokens.RETURN, yyline);
          }
        case 80: break;
        case 40: 
          { String rgb = yytext().replace("<<", "").replace(">>", "");
                              String[] arr = rgb.split(",");
                              int r = Integer.parseInt(arr[0].trim());
                              int g = Integer.parseInt(arr[1].trim());
                              int b = Integer.parseInt(arr[2].trim());
                              return new Color(r, g, b);
          }
        case 81: break;
        case 41: 
          { String rgb = yytext().replace("<<", "").replace(">>", "");
                              String[] arr = rgb.split(",");
                              int r = Integer.parseInt(arr[0].trim());
                              int g = Integer.parseInt(arr[1].trim());
                              int b = Integer.parseInt(arr[2].trim());
                              double a = Double.parseDouble(arr[3].trim());
                              return new Color(r, g, b, a);
          }
        case 82: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {  return new Token(Tokens.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
